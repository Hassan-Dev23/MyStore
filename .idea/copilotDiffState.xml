<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/mystore/presentation/screens/ProductDetailsScreenUI.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/mystore/presentation/screens/ProductDetailsScreenUI.kt" />
              <option name="originalContent" value="package com.example.mystore.presentation.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil3.compose.AsyncImage&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.mystore.presentation.viewModel.ShopViewModel&#10;import com.example.mystore.presentation.viewModel.UIState&#10;import com.example.mystore.domain.modelClasses.Product&#10;&#10;@Composable&#10;fun ProductDetailScreenUI(&#10;    innerPadding: PaddingValues,&#10;    productId: String,&#10;    viewModel: ShopViewModel = hiltViewModel()&#10;) {&#10;    val productState by viewModel.getProductByIdState.collectAsState()&#10;&#10;    LaunchedEffect(productId) {&#10;        viewModel.getProductById(productId)&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .padding(innerPadding)&#10;    ) {&#10;        when (productState) {&#10;            is UIState.Loading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            is UIState.Error -&gt; {&#10;                Text(&#10;                    text = (productState as UIState.Error).message,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;            }&#10;            is UIState.Success -&gt; {&#10;                val product = (productState as UIState.Success&lt;Product&gt;).data&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                ) {&#10;                    // Product Image&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(280.dp)&#10;                            .clip(RoundedCornerShape(12.dp))&#10;                            .background(MaterialTheme.colorScheme.surfaceVariant),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        AsyncImage(&#10;                            model = product.imageUrls.firstOrNull(),&#10;                            contentDescription = product.name,&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentScale = ContentScale.Crop&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Product Name and Price&#10;                    Text(product.name, fontWeight = FontWeight.Bold, fontSize = 20.sp)&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&quot;Rs: ${product.price}&quot;, fontSize = 18.sp, color = MaterialTheme.colorScheme.primary)&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Product Description&#10;                    Text(product.description ?: &quot;No description&quot;, fontSize = 16.sp)&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Product Brand and Category&#10;                    Text(&quot;Brand: ${product.brand}&quot;, fontSize = 14.sp, color = Color.Gray)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&quot;Category: ${product.category}&quot;, fontSize = 14.sp, color = Color.Gray)&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Wishlist and Cart Buttons&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        TextButton(onClick = { /* Handle share action */ }) {&#10;                            Icon(Icons.Default.FavoriteBorder, contentDescription = null)&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Text(&quot;Add to Wishlist&quot;)&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = { /* TODO: Add buy now logic */ },&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        ) {&#10;                            Text(&quot;Buy now&quot;)&#10;                        }&#10;                        Button(&#10;                            onClick = { /* TODO: Add to cart logic */ },&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;                        ) {&#10;                            Text(&quot;Add to Cart&quot;, color = MaterialTheme.colorScheme.onPrimaryContainer)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {}&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.mystore.presentation.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.FavoriteBorder&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil3.compose.AsyncImage&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.example.mystore.presentation.viewModel.ShopViewModel&#10;import com.example.mystore.presentation.viewModel.UIState&#10;import com.example.mystore.domain.modelClasses.Product&#10;&#10;@Composable&#10;fun ProductDetailScreenUI(&#10;    innerPadding: PaddingValues,&#10;    productId: String,&#10;    viewModel: ShopViewModel = hiltViewModel()&#10;) {&#10;    val productState by viewModel.getProductByIdState.collectAsState()&#10;&#10;    LaunchedEffect(productId) {&#10;        viewModel.getProductById(productId)&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .padding(innerPadding)&#10;    ) {&#10;        when (productState) {&#10;            is UIState.Loading -&gt; {&#10;                CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))&#10;            }&#10;            is UIState.Error -&gt; {&#10;                Text(&#10;                    text = (productState as UIState.Error).message,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;            }&#10;            is UIState.Success -&gt; {&#10;                val product = (productState as UIState.Success&lt;Product&gt;).data&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                ) {&#10;                    // Product Images Carousel&#10;                    if (product.imageUrls.isNotEmpty()) {&#10;                        LazyRow(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(280.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            items(product.imageUrls.size) { index -&gt;&#10;                                AsyncImage(&#10;                                    model = product.imageUrls[index],&#10;                                    contentDescription = product.name,&#10;                                    modifier = Modifier&#10;                                        .width(280.dp)&#10;                                        .height(280.dp)&#10;                                        .clip(RoundedCornerShape(12.dp))&#10;                                        .background(MaterialTheme.colorScheme.surfaceVariant),&#10;                                    contentScale = ContentScale.Crop&#10;                                )&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(280.dp)&#10;                                .clip(RoundedCornerShape(12.dp))&#10;                                .background(MaterialTheme.colorScheme.surfaceVariant),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            // Placeholder if no images&#10;                            Text(&quot;No Image&quot;, color = Color.Gray)&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Product Name and Price&#10;                    Text(product.name, fontWeight = FontWeight.Bold, fontSize = 20.sp)&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&quot;Rs: ${product.price}&quot;, fontSize = 18.sp, color = MaterialTheme.colorScheme.primary)&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Product Description&#10;                    Text(product.description ?: &quot;No description&quot;, fontSize = 16.sp)&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Product Brand and Category&#10;                    Text(&quot;Brand: ${product.brand}&quot;, fontSize = 14.sp, color = Color.Gray)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&quot;Category: ${product.category}&quot;, fontSize = 14.sp, color = Color.Gray)&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Wishlist and Cart Buttons&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        TextButton(onClick = { /* Handle share action */ }) {&#10;                            Icon(Icons.Default.FavoriteBorder, contentDescription = null)&#10;                            Spacer(modifier = Modifier.width(4.dp))&#10;                            Text(&quot;Add to Wishlist&quot;)&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Button(&#10;                            onClick = { /* TODO: Add buy now logic */ },&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp)&#10;                        ) {&#10;                            Text(&quot;Buy now&quot;)&#10;                        }&#10;                        Button(&#10;                            onClick = { /* TODO: Add to cart logic */ },&#10;                            modifier = Modifier.weight(1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primaryContainer)&#10;                        ) {&#10;                            Text(&quot;Add to Cart&quot;, color = MaterialTheme.colorScheme.onPrimaryContainer)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            else -&gt; {}&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>